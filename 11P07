#include <Servo.h>

// Pin assignments
#define PIN_LED   9    // LED active-low
#define PIN_TRIG  12   // sonar sensor TRIGGER
#define PIN_ECHO  13   // sonar sensor ECHO
#define PIN_SERVO 10   // servo motor

// configurable parameters for sonar
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 25      // sampling interval (unit: msec)     
#define PULSE_DURATION 10 
#define _DIST_MIN 180.0  // minimum distance to be measured (unit: mm)
#define _DIST_MAX 360.0  // maximum distance to be measured (unit: mm)

#define TIMEOUT ((INTERVAL / 2) * 1000.0)  // maximum echo waiting time (unit: usec)
#define SCALE (0.001 * 0.5 * SND_VEL)  // coefficent to convert duration to distance

#define _EMA_ALPHA 0.5    // EMA weight of new sample (range: 0 to 1)
                          // Setting EMA to 1 effectively disables EMA filter.


Servo myservo;
float dist_ema = _DIST_MAX, dist_prev = _DIST_MAX;  // unit: mm
unsigned long last_sampling_time;                   // unit: ms

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);    // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);     // sonar ECHO
  digitalWrite(PIN_TRIG, LOW);  // turn-off Sonar

  myservo.attach(PIN_SERVO); 
  myservo.write(0);  

  // initialize serial port
  Serial.begin(57600);
}

void loop() {
  if (millis() < (last_sampling_time + INTERVAL))
    return;

  float dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  if (dist_raw < _DIST_MIN || dist_raw > _DIST_MAX) {
    dist_raw = dist_prev;           // cut lower than minimum
    digitalWrite(PIN_LED, 1);    // LED OFF
  } else {
    dist_prev = dist_raw;
    digitalWrite(PIN_LED, 0);     // LED ON
  }

  // Apply ema filter here
  dist_ema = _EMA_ALPHA * dist_raw + ((1.0 - _EMA_ALPHA) * dist_ema);

  int servo_angle = map(dist_ema, _DIST_MIN, _DIST_MAX, 0, 180);
  servo_angle = constrain(servo_angle, 0, 180);
  myservo.write(servo_angle);

  // output the distance to the serial port
  Serial.print("Min:");  Serial.print(_DIST_MIN);
  Serial.print(",dist:"); Serial.print(dist_raw);
  Serial.print(",ema:"); Serial.print(dist_ema);
  Serial.print(",Servo:"); Serial.print(myservo.read());
  Serial.print(",Max:"); Serial.print(_DIST_MAX);
  Serial.println("");

  // update last sampling time
  last_sampling_time += INTERVAL;
}


// get a distance reading from USS. return value is in millimeter.
float USS_measure(int TRIG, int ECHO) 
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE;  // unit: mm
}
